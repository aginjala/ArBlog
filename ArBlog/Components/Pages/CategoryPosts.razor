@page "/{categorySlug}-posts"
@using ArBlog.Extensions

@inject IBlogPostService BlogPostService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager

@if (hasNoPosts)
{
	<div class="container mt-5 mb-5">
		<div class="row">
			<div class="col-md-8">
				<h5 class="font-weight-bold spanborder"><span>@_category?.Name</span></h5>
				<div class="card border-0 mb-5 box-shadow">
					<p class="p-5 text-center card-text">
						There are no blog posts to display under @_category?.Name.
					</p>
				</div>
			</div>
		</div>
	</div>
}
else
{
	<div class="container mt-5 mb-5">
		<div class="row">
			<div class="col-md-8">
				<h5 class="font-weight-bold spanborder"><span>Featured in @_category?.Name</span></h5>
				<div class="card border-0 mb-5 box-shadow">
					<div style="background-image: url(@_featured.Image); height: 350px; background-size: cover; background-repeat: no-repeat;">
					</div>
					<div class="card-body px-0 pb-0 d-flex flex-column align-items-start">
						<h2 class="h2 font-weight-bold">
							<a class="text-dark" href="posts/@_featured.Slug">@_featured.Title</a>
						</h2>
						<p class="card-text">
							@_featured.Introduction
						</p>
						<div>
							<small class="d-block"><a class="text-muted" href="./author.html">@_featured.User.Name</a></small>
							<small class="text-muted">@_featured.PublishedAt.ToDisplay()</small>
						</div>
					</div>
				</div>
				<h5 class="font-weight-bold spanborder"><span>Recent</span></h5>
				<RecentBlogPosts Posts="_recent" />
			</div>
			<div class="col-md-4 pl-4">
				<div class="sticky-top">
					<h5 class="font-weight-bold spanborder"><span>Popular</span></h5>
					<PopularBlogPosts Posts="_popular" />
				</div>
			</div>
		</div>
	</div>
}


<div class="container pt-4 pb-4">
	<Subscribe />
</div>

@code {
	[Parameter]
	public string? CategorySlug { get; set; }

	Category? _category = null;

	private BlogPost? _featured;
	private BlogPost[] _popular = [];
	private BlogPost[] _recent = [];

	private bool hasNoPosts => _featured is null && _popular.Length == 0 && _recent.Length == 0;

	protected override async Task OnInitializedAsync()
	{
		if (!string.IsNullOrWhiteSpace(CategorySlug))
		{
			_category = await CategoryService.GetCategoryBySlugAsync(CategorySlug);
		}

		if (_category is null)
		{
			NavigationManager.NavigateTo("/", replace: true);
			return;
		}

		var posts = await Task.WhenAll(
			BlogPostService.GetFeaturedBlogPostsAsync(1, _category.Id),
			BlogPostService.GetPopularBlogPostsAsync(4, _category.Id),
			BlogPostService.GetRecentBlogPostsAsync(5, _category.Id)
		);

		_featured = posts[0].FirstOrDefault();
		_popular = posts[1];
		_recent = posts[2];
	}
}
